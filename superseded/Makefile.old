# C++ compiler to use
CXX := clang++-20

# Optionally define AddressSanitizer flag
# SANITIZEFLAGS := -fsanitize=address
SANITIZEFLAGS :=

# Compiler flags
# -g: Include debug info
# -Wall: Turn on all common warnings
# -std=c++20: Enable C++20 features
# $(SANITIZEFLAGS): Includes sanitizer (flags if enabled)
# -MMD -MP: Flags for automatic dependency generation
#   -MMD: Generate dependency files (.d files) for each .o file
#   -MP: Add phony target for each header file in the .d file (stops errors if a header deleted)
CPPFLAGS := -g -Wall -std=c++20 $(SANITIZEFLAGS) -MMD -MP

# Linker flags
# -lpcre: Links with the PCRE library (if needed by your code).
# $(SANITIZEFLAGS): Includes sanitizer flags for linking.
LDFLAGS := -lpcre $(SANITIZEFLAGS)

# Include directories
# -I.: Add current directory to the include path
INCLUDEDIRS := -I.

# Command to remove files
RM := rm -f

# Source files that will become executables - **THIS lIST DRIVES THE ENTIRE BUILD PROCESS**
EXEC_SRCS = hello1.cpp hello2.cpp hello3.cpp compiler-language-info.cpp leaky.cpp test.cpp

# Generate list of exe names by replacing .cpp with .exe (eg: hello1.cpp to hello1.exe)
EXECUTABLES = $(patsubst %.cpp,%.exe,$(EXEC_SRCS))

# Generate list of obj files by replacing .cpp with .o (eg: hello1.cpp to hello1.o)
OBJECTS = $(patsubst %.cpp,%.o,$(EXEC_SRCS)) test-joe.o

# Generate list of dependency files by replacing .cpp with .d
# These are automatically generated via the -MMD flag
DEPS = $(patsubst %.cpp,%.d,$(EXEC_SRCS)) test-joe.d

# 'all' is the default target - builds all specified executables
all: $(EXECUTABLES)

# --- Generic Rules using Pattern Matching ---

# Generic rule to build executable from its corresponding object file(s)
# This handles hello1.exe, hello2.exe, hello3.exe, compiler-language-info.exe, leaky.exe
# test.exe is handled by a specific rule below due to multiple object files
# $@: the target name (e.g., hello1.exe)
# $*.o: the stem of the target with .o extension (e.g., hello1.o)
# Note: This rule assumes a single .o file for each .exe.
#   For test.exe, we need a specific rule because it links multiple .o files.
$(filter-out test.exe,$(EXECUTABLES)): %.exe: %.o
	$(CXX) $(LDFLAGS) $< -o $@

# Generic rule to compile a .cpp file into a .o file.
# This handles hello1.o, hello2.o, hello3.o, compiler-language-info.o, leaky.o, test.o, test-joe.o
# $@: the target name (e.g., hello1.o)
# $<: the first prerequisite (e.g., hello1.cpp)
%.o: %.cpp
	$(CXX) $(CPPFLAGS) -c $< $(INCLUDEDIRS)

# --- Specific Rules for Multi-Object Executables ---

# Special rule for test.exe because it links multiple object files
# $^: all prerequisites (test.o test-joe.o)
test.exe: test.o test-joe.o
	$(CXX) $(LDFLAGS) $^ -o $@

# --- Clean Target ---

# 'clean' target removes compiled files, executables, and dependency files
# Uses wildcard style to stop complaints if file isn't there to be deleted
.PHONY: all clean

clean:
	$(RM) $(wildcard $(OBJECTS)) $(wildcard $(EXECUTABLES)) $(wildcard $(DEPS))

# --- Include Auto-Generated Dependencies ---

# Include automatically generated dependency files
# These files list header dependencies for each .o file
# '-' before include means 'don't error if file doesn't exist'
-include $(DEPS)
